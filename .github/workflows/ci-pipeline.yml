name: FE CI Pipeline

on:
  push:
    branches:
      - main
      - SHOWCASE-90-pipeline-to-build-and-push
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test & Lint Frontend Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install Dependencies
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          npm cache clean --force
          npm install

      - name: Create ESLint Override Config
        run: |
          echo '{
            "extends": "next/core-web-vitals",
            "rules": {
              "@typescript-eslint/no-unsafe-declaration-merging": "off",
              "@typescript-eslint/no-explicit-any": "off",
              "@typescript-eslint/no-unused-vars": "off",
              "@next/next/no-img-element": "off",
              "react-hooks/exhaustive-deps": "off"
            }
          }' > .eslintrc.json

      - name: Run Linting
        run: npm run lint

      - name: Run Unit Tests
        run: npm test

  sonar:
    name: SonarQube Analysis
    needs: test  # Runs only if tests & linting pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Static Code Analysis with SonarQube
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=showcase-ui
            -Dsonar.sources=.

  build:
    name: Build & Push Frontend Docker Image
    needs: sonar  # Runs only if SonarQube analysis passes
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile  # Uses Dockerfile from the docker folder
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:latest
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  image-scan:
    name: Image Scan
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Scan Docker Image
        uses: ./.github/actions/trivy-scan
        with:
          scan-type: 'image'
          scan-ref: 'ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}'
          scan-title: 'Docker Image Scan Results for Frontend'