name: Build and Deploy UI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    # paths:
    #   - "**"

jobs:
  
  # test:
  #   name: "Test Frontend Code"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
        
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #         cache: "npm"

  #     - name: Install Dependencies
  #       run: |
  #         rm -rf node_modules
  #         rm -f package-lock.json
  #         npm cache clean --force
  #         npm install

  #     - name: Run Unit Tests
  #       run: npm test

  build_showcase_ui:
    name: "Build Showcase UI"
    runs-on: ubuntu-latest
    # if: ${{ always() && fromJSON(needs.ready.outputs.build) == true }}
    #needs:
    #  - test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build and Push Docker Image
        id: builder
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:latest
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    outputs:
      image_tag: ${{ github.sha }}


  ##### FOR github container registry use the following:
  # build_showcase_ui:
  #   name: "Build Showcase UI"
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && fromJSON(needs.ready.outputs.build) == true }}
  #   needs:
  #     - ready
  #     - test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build & Push Docker Image
  #       uses: ./.github/actions/build_docker
  #       id: builder
  #       with:
  #         context: "."
  #         dockerfile: "./docker/Dockerfile"
  #         image_name: ${{ github.repository_owner}}/ditp-showcase-creator-ui
  #         registry: ghcr.io
  #         registry_username: ${{ github.repository_owner}}
  #         registry_password: ${{ secrets.GITHUB_TOKEN }}
  #   outputs:
  #     image_tag: ${{ steps.builder.outputs.image_tag }}


  image-scan:
    name: "Image Scan - Showcase UI"
    needs: build_showcase_ui
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Scan UI Docker Image
        uses: ./.github/actions/trivy-scan
        with:
          scan-type: 'image'
          scan-ref: 'public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ github.sha }}'
          scan-title: 'Docker Image Scan Results for Showcase UI'

  deploy:
    name: Deploy
    environment: development
    runs-on: ubuntu-latest
    needs:
      - build_showcase_ui
    # if: ${{ always() && (fromJSON(needs.ready.outputs.deploy) == true) && !(contains(needs.*.result, 'failure')) }}

    steps:
      - uses: actions/checkout@v4

      # Deploy using SSH to EC2 instance
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Run Helm commands on the EC2 instance
            helm upgrade --install showcase-ui -f helm-k8s/ditp-showcase-creator-ui/charts/showcase-ui/values.yaml \
              --set ui.image.repository=public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui \
              --set ui.image.tag=${{ github.sha }} \
              --set ingress.hosts[0].host=bcshowcase-ui.dev.nborbit.ca \
              /path/to/charts/showcase-ui --wait
            
            # Create Certificate
            cat <<EOF | kubectl apply -f -
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: showcase-ui-tls
            spec:
              secretName: showcase-ui-tls
              issuerRef:
                name: letsencrypt-prod
                kind: ClusterIssuer
              dnsNames:
                - bcshowcase-ui.dev.nborbit.ca
            EOF
            
            # Create Traefik IngressRoute
            cat <<EOF | kubectl apply -f -
            apiVersion: traefik.containo.us/v1alpha1
            kind: IngressRoute
            metadata:
              name: showcase-ui-route
              namespace: default
            spec:
              entryPoints:
                - websecure
              routes:
                - match: Host(\`bcshowcase-ui.dev.nborbit.ca\`)
                  kind: Rule
                  services:
                    - name: showcase-ui-showcase-ui
                      port: 3050
              tls:
                secretName: showcase-ui-tls
            EOF
      
      - name: Restart Deployments
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            kubectl rollout restart deployment showcase-ui-showcase-ui

  ### FOR OPENSHIFT USE THE KUBECTL TO DEPLOY
  # deploy:
  #   name: Deploy
  #   environment: development
  #   runs-on: ubuntu-latest
  #   needs:
  #     - ready
  #     - build_showcase_ui
  #   if: ${{ always() && (fromJSON(needs.ready.outputs.deploy) == true) && !(contains(needs.*.result, 'failure')) }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Helm
  #       uses: azure/setup-helm@v3
  #       with:
  #         version: 'latest'

  #     - name: Set up kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'

  #     - name: Set Kubernetes context
  #       uses: azure/k8s-set-context@v3
  #       with:
  #         method: kubeconfig
  #         kubeconfig: ${{ secrets.KUBE_CONFIG }}

  #     # Deploy to K3s for development
  #     - name: Run Showcase UI Helm
  #       run: |
  #         helm upgrade --install ${{ github.event.number }}-showcase-ui -f ./charts/showcase-ui/values.yaml \
  #           --set ui.image.repository=public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui \
  #           --set ui.image.tag=${{ github.event.number }} \
  #           --set ingress.hosts[0].host=${{ github.event.number }}-showcase-ui.dev.nborbit.ca \
  #           ./charts/showcase-ui --wait


  deploymenturls:
    name: Deployment URLs comment
    runs-on: ubuntu-latest
    needs:
      - deploy
    # if: ${{ (fromJSON(needs.ready.outputs.deploy) == true) && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          comment-author: "github-actions[bot]"
          body-includes: Deployment URLs ready for review.

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            | Deployment | Resource | Location |
            | --- | --- | --- |
            | Showcase UI | | bcshowcase-ui.dev.nborbit.ca/ |

            Deployment URLs ready for review.
